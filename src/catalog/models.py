from django.contrib import admin
from django.db import models
from django.urls import reverse
from django.utils.html import format_html
from colorfield.fields import ColorField
from django.utils.safestring import mark_safe
from django_ckeditor_5.fields import CKEditor5Field
from .icon import LINK_EDIT_ICON


class Category(models.Model):
    name = models.CharField(verbose_name="–ù–∞–∑–≤–∞", max_length=16)

    def __str__(self) -> str:
        return self.name

    class Meta:
        verbose_name = "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è"
        verbose_name_plural = "–ö–∞—Ç–µ–≥–æ—Ä—ñ—ó"

class ProductOptionGroup(models.Model):
    name = models.CharField(verbose_name="–ù–∞–∑–≤–∞ –≥—Ä—É–ø–∏",max_length=64)
    is_required = models.BooleanField(verbose_name="–û–±–æ–≤'—è–∑–∫–æ–≤–∞ –≥—Ä—É–ø–∞", default=True)

    def __str__(self):
        return self.name

    class Meta:
        verbose_name = "–ì—Ä—É–ø–∞ –æ–ø—Ü—ñ–π —Ä—ñ–∑–Ω–æ–≤–∏–¥—É"
        verbose_name_plural = "–ì—Ä—É–ø–∏ –æ–ø—Üi—ó —Ä—ñ–∑–Ω–æ–≤–∏–¥—ñ–≤"

class Color(models.Model):
    name = models.CharField(verbose_name="–ù–∞–∑–≤–∞ –∫–æ–ª—å–æ—Ä—É", max_length=20, unique=True)
    color = ColorField(verbose_name="–ö–æ–ª—ñ—Ä", default='#FF0000')

    def __str__(self):
        return self.name

    @admin.display(ordering="name")
    def colored_name(self):
        return format_html(
            '<span style="color: {};">{}</span>',
            self.color,
            self.name,
        )

    class Meta:
        verbose_name = "–ö–æ–ª—ñ—Ä –æ–ø—Üi–π"
        verbose_name_plural = "–ö–æ–ª—ñ—Ä–∏ –æ–ø—Üi–π"

class Product(models.Model):
    name = models.CharField(verbose_name="–ù–∞–∑–≤–∞", max_length=64)
    description = models.TextField(verbose_name="–û–ø–∏—Å")
    category = models.ForeignKey(
        verbose_name="–ö–∞—Ç–µ–≥–æ—Äi—è",
        to=Category,
        on_delete=models.CASCADE,
        related_name="products",
    )
    photo = models.ImageField(verbose_name="–ì–æ–ª–æ–≤–Ω–µ —Ñ–æ—Ç–æ", upload_to="images")
    price = models.PositiveIntegerField(verbose_name="–¶i–Ω–∞")
    purchase_count = models.PositiveIntegerField(
        verbose_name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫", default=0
    )

    view_count = models.PositiveIntegerField(
        verbose_name="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤", default=0
    )

    def __str__(self) -> str:
        return self.name

    class Meta:
        verbose_name = "–¢–æ–≤–∞—Ä"
        verbose_name_plural = "–¢–æ–≤–∞—Ä–∏"

    def get_telegram_text(self):
        return self.name

    def increment_view_count(self):
        """–ó–±—ñ–ª—å—à–∏—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –Ω–∞ 1."""
        self.view_count += 1
        self.save(update_fields=["view_count"])

    @admin.display(description="photo")
    def mini_photo(self):
        return mark_safe(f"<a target='_blank' href='{self.photo.url}'><img src='{self.photo.url}' width=70></a>")

    @admin.display(description="–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ —Ü—ñ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –∑ –æ–ø—Ü—ñ—è–º–∏")
    def get_min_full_price(self):
        """Calculate the minimum full price by adding the cheapest option from each group."""
        # Get all unique groups associated with the product via the options
        groups = ProductOptionGroup.objects.filter(options__product=self).distinct()

        # Initialize the total minimum price with the base price
        min_price = self.price

        # Iterate over each group to find the cheapest option in that group
        for group in groups:
            # Filter options for the current product and group, and get the minimum additional price
            min_additional_price = group.options.filter(product=self).order_by(
                'additional_price').first().additional_price
            min_price += min_additional_price

        return min_price

class ProductOption(models.Model):
    group = models.ForeignKey(ProductOptionGroup, verbose_name="–ì—Ä—É–ø–∞", on_delete=models.CASCADE, related_name="options"
    )
    product = models.ForeignKey(Product, verbose_name="–ü—Ä–æ–¥—É–∫—Ç", on_delete=models.CASCADE, related_name="options"
    )
    color = models.ForeignKey(
        Color, verbose_name="–ö–æ–ª—ñ—Ä", on_delete=models.CASCADE, related_name="options",blank=True, null=True )

    additional_price = models.IntegerField(verbose_name="–î–æ–¥–∞—Ç–∫–æ–≤–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å", default=0)
    value = CKEditor5Field(
        verbose_name="–ù–∞–∑–≤–∞ –æ–ø—Ü—ñ–π", max_length=100, config_name="default"
    )

    def get_group(self):
        return self.group.name

    def get_color(self):
        if self.color:
            return self.color.color  # type: ignore

    @admin.display(ordering="value")
    def format_html_value(self):
        return format_html(self.value)

    def __str__(self) -> str:
        return  f"{self.group.name}-{format_html(self.value)}-{self.additional_price}‚Ç¥" if self.additional_price else f"{self.group.name}-{format_html(self.value)}"

    class Meta:
        verbose_name = "–û–ø—Üi—è —Ä—ñ–∑–Ω–æ–≤–∏–¥—É"
        verbose_name_plural = "–û–ø—Üi—ó —Ä—ñ–∑–Ω–æ–≤–∏–¥i–≤"


class ProductImage(models.Model):
    image = models.FileField(verbose_name="–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è", upload_to="images")
    product = models.ForeignKey(
        verbose_name="–í—ñ–¥–Ω–æ—Å–∏—Ç—å—Å—è –¥–æ",
        to=Product,
        on_delete=models.CASCADE,
        related_name="images",
    )

    def __str__(self) -> str:
        return "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É"

    class Meta:
        verbose_name = "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—É"
        verbose_name_plural = "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Äi–≤"

    @admin.display(description="photo")
    def mini_photo(self):
        return mark_safe(f"<a target='_blank' href='{self.image.url}'><img src='{self.image.url}' width=70></a>")


class Order(models.Model):
    datetime = models.DateTimeField(
        verbose_name="–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", auto_now_add=True
    )
    pib = models.CharField(verbose_name="–ü–Ü–ë", max_length=512)
    phone = models.CharField(verbose_name="–ù–æ–º–µ—Ä –¢–µ–ª–µ—Ñ–æ–Ω–∞", max_length=16)
    city = models.CharField(verbose_name="–ú—ñ—Å—Ç–æ", max_length=200)
    post_office = models.CharField(verbose_name="–ü–æ—à—Ç–∞", max_length=100)
    post_office_id = models.CharField(verbose_name="–íi–¥–¥i–ª–µ–Ω–Ω—è", max_length=100)
    full_price = models.DecimalField(
        verbose_name="–¶i–Ω–∞", max_digits=12, decimal_places=2
    )
    class Meta:
        verbose_name = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"
        verbose_name_plural = "–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è"

    def __str__(self) -> str:
        return f"‚Ññ{self.id} {self.pib}"

    def get_telegram_text(self):
        order_parts = self.order_items.all()
        parts_text = "\n".join([part.get_telegram_text() for part in order_parts])

        return (
            f"üìå‚Ññ{self.id}|–î–∞—Ç–∞ —Ç–∞ —á–∞—Å –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: {self.datetime.strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ{self.id} –≤—ñ–¥ {self.pib}:\n"
            f"üìû–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: +{self.phone}\n"
            f"üè¢–ú—ñ—Å—Ç–æ: {self.city}\n"
            f"üì¶–ü–æ—à—Ç–∞: {self.post_office}|{self.post_office_id}\n"
            "üõç–¢–æ–≤–∞—Ä–∏:\n\n"
            f"{parts_text}\n"
            f"üí∞–£—Å—å–æ–≥–æ: {self.full_price} ‚Ç¥\n"
        )


class OrderProductPart(models.Model):
    related_order = models.ForeignKey(
        verbose_name="–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
        to=Order,
        on_delete=models.CASCADE,
        related_name="order_items",
    )
    product = models.ForeignKey(
        verbose_name="–¢–æ–≤–∞—Ä", to=Product, on_delete=models.SET_NULL, null=True
    )
    count = models.IntegerField(verbose_name="–öi–ª—å–∫i—Å—Ç—å")

    class Meta:
        verbose_name = "–ü–æ–¥—Ä–æ–±–∏—Üi –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è"
        verbose_name_plural = "–ü–æ–¥—Ä–æ–±–∏—Üi –∑–∞–º–æ–≤–ª–µ–Ω—å"

    def get_telegram_text(self):
        """
        –§–æ—Ä–º—É—î –∫—Ä–∞—Å–∏–≤–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–¥–Ω—ñ—î—ó —á–∞—Å—Ç–∏–Ω–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è.
        """

        option_items = self.option_items.all().order_by("option__group__id")
        elements = ["üîπ", "üî∏"]
        options_list = ""
        price= self.product.price
        element_index = 0
        for item in option_items:
            elem = elements[element_index % len(elements)]
            options_list += f"{elem}{item.get_telegram_text()}"
            price += item.option.additional_price
            element_index += 1
        price_text = f"{price}‚Ç¥;"
        if self.count !=1:
            price_text = f"{self.count}—à—Ç.*{price}‚Ç¥={self.count*price}‚Ç¥"
        return (
            f"üëï{self.product.id}|{self.product.name}\n"
            f"{options_list}"
            f"üíµ–¶—ñ–Ω–∞: {price_text}\n"
        )

    @admin.display(description="—Ñ–æ—Ç–æ")
    def mini_photo(self):
        return self.product.mini_photo()


    @admin.display(description="–û–ø—Ü—ñ–π ")
    def product_option(self):
        option_items = self.option_items.all()
        if not option_items:
            return "No options available"
            # –§–æ—Ä–º—É—î–º–æ HTML —Å–ø–∏—Å–æ–∫
        options_list=""
        for item in option_items:
            options_list += item.colored_name()
        return mark_safe(options_list)

    @admin.display(description="–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ")
    def admin_link_icon(self):
        """–î–æ–¥–∞—î —ñ–∫–æ–Ω–∫—É –∑—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–±‚Äô—î–∫—Ç–∞."""
        url = reverse('admin:catalog_orderproductpart_change', args=[self.pk])
        return format_html(
            LINK_EDIT_ICON,url)

    def save(self, *args, **kwargs):
        """
        –ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É save –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è purchase_count.
        """
        if self.pk is None and self.product:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —Ü–µ –Ω–æ–≤–∏–π –∑–∞–ø–∏—Å
            self.product.purchase_count += self.count
            self.product.save(update_fields=["purchase_count"])
        super().save(*args, **kwargs)


class OrderOptionsProductPart(models.Model):
    order_part = models.ForeignKey(
        verbose_name="–í—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ –ü—Ä–æ–¥—É–∫—Ç—É",
        to=OrderProductPart,
        on_delete=models.CASCADE,
        related_name="option_items",
    )
    option = models.ForeignKey(ProductOption, verbose_name="–û–ø—Ü—ñ—è", on_delete=models.CASCADE, related_name="options_order"
                              )
    def __str__(self) -> str:
        return f"-{self.option.group.name}-{self.option.value} (+{self.option.additional_price}‚Ç¥)" if self.option.additional_price else f"-{self.option.group.name}-{self.option.value}"

    def colored_name(self):
        if self.option.color:
            return f'<span style="color: {self.option.color.color}">{self.option.value}</span>'
        return self.option.value


    class Meta:
        verbose_name = "–û–ø—Ü—ñ—è –ø–æ —Ç–æ–≤–∞—Ä—É"
        verbose_name_plural = "–û–ø—Ü—ñ–π –ø–æ —Ç–æ–≤–∞—Ä—É"

    def get_telegram_text(self):
        return f"{self.option.group.name}: {self.option.value}:{self.option.additional_price}‚Ç¥\n" if self.option.additional_price else f"{self.option.group.name}:{self.option.value}\n"